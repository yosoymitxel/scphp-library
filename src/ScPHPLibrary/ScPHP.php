<?php

namespace ScPHPLibrary;
use PDO;
use Exception;

class ScPHP{
    
    public function __construct($depurar=false)
    {
        define('DEPURAR',$depurar);
    }


    /*
    Librería SC PHP
    Fecha de inicio: 3/08/2020
    
    Lista de categorías:
    
    DEV     = Debug
    DOM     = Manejo de DOM - HTML
    URL     = Manejo de Urls
    SQL     = Manejo de SQL
    JS      = Opciones de JS
    STR     = Manejo de string
    FEC     = Manejo de fechas
    ARR     = Manejo de Arrays
    IS      = Tipo de variable
    
    */
    
    
    /*###DEV###*/
    
   /**
    * The function is a PHP code that outputs a formatted var_dump of a given object with optional HTML
    * tags and attributes.
    * 
    * @param obj The variable or object that you want to dump and display its contents.
    * @param etiqueta This parameter specifies the HTML tag to be used for wrapping the output of the
    * var_dump function. If no tag is specified, the output will be wrapped in a <pre> tag by default.
    * @param id The id parameter is used to specify the HTML id attribute for the element being
    * created. This can be useful for targeting the element with CSS or JavaScript.
    * @param class The "class" parameter is used to specify the CSS class(es) to be applied to the HTML
    * element generated by the function. This allows for custom styling of the element using CSS.
    * @param style The style parameter is used to add CSS styles to the HTML element that is being
    * created. It can be used to change the font, color, size, and other visual aspects of the element.
    * For example, if you want to change the background color of the element, you can use the following
    * style
    */
    public static function dev_var_dump($obj,$etiqueta='',$id='',$class='',$style=''){
            echo (!ScPHP::dom_etiqueta_inicio($etiqueta)) ?
                "<pre id='$id' class='$class' style='$style'>" :
                "<$etiqueta id='$id' class='$class' style='$style'>";
            var_dump($obj);
            echo (!ScPHP::dom_etiqueta_inicio($etiqueta)) ? '</pre>' : "</$etiqueta>";
            ScPHP::dom_etiqueta_fin($etiqueta);
    }
    
   /**
    * This is a PHP function that echoes HTML code with specified attributes and values.
    * 
    * @param t The text or value to be displayed.
    * @param valor The value to be displayed alongside the text in the HTML element. It is an optional
    * parameter and if not provided, it will not be displayed.
    * @param etiqueta The "etiqueta" parameter is a string that specifies the HTML tag to be used for
    * the output. For example, "p" for a paragraph tag or "span" for a span tag.
    * @param id The id parameter is used to specify the unique identifier for the HTML element. It is
    * used to identify the element in the document and can be used for styling or scripting purposes.
    * @param class The class parameter is used to specify one or more CSS classes to be applied to the
    * HTML element being created. This allows for styling of the element using CSS.
    * @param style The style parameter is used to add inline CSS styles to the HTML element being
    * created. It can be used to set properties such as font-size, color, background-color, etc.
    * @param name The name attribute is used to specify the name of the HTML element. It is often used
    * when submitting a form to identify the values that are being sent to the server.
    */
    public static function dev_echo($t,$valor='',$etiqueta='p',$id='',$class='',$style='',$name=''){
            $valor = ($valor!='') ?  ' : '.$valor: '';
            echo("<$etiqueta id='$id' class='$class' style='$style' name='$name'>$t$valor</$etiqueta>");
    }
    
   /**
    * This PHP function activates or deactivates global debugging by setting error reporting and
    * display settings.
    * 
    * @param condicion The parameter "condicion" is a boolean value that determines whether to enable
    * or disable the display of errors and warnings in PHP. If it is set to true, errors and warnings
    * will be displayed, and if it is set to false, they will be hidden.
    */
    public static function dev_activar_depurar_global($condicion){
        ini_set('display_errors',$condicion);
        ini_set('display_startup_errors',$condicion);
        error_reporting(E_ALL);
    }
    
    /**
     * This PHP function creates an HTML element with a title and text content.
     * 
     * @param titulo The title or label for the text being echoed.
     * @param texto The text that will be displayed in the HTML element created by the function. It
     * will be concatenated with the  parameter to form the final text.
     * @param etiqueta This parameter specifies the HTML tag to be used for the element being created.
     * For example, if you set it to "div", the function will create a <div> element.
     * @param id The id parameter is used to specify the unique identifier for the HTML element that
     * will be created by the function. This can be useful for styling or manipulating the element
     * using JavaScript. If no id is specified, the element will not have a unique identifier.
     * @param class The class parameter is used to specify one or more CSS classes to be applied to the
     * HTML element created by the function. This allows for styling of the element using CSS.
     * @param style The style parameter is used to add inline CSS styles to the HTML element created by
     * the function. It should be a string containing valid CSS rules separated by semicolons (;). For
     * example: "color: red; font-size: 16px;".
     * @param name The name parameter is a string that specifies the name of the element. It is
     * commonly used when submitting a form to identify the values that are being sent to the server.
     */
    public static function dev_echo_indice($titulo,$texto,$etiqueta='p',$id='',$class='',$style='',$name=''){
        $texto = "$titulo : $texto";
        ScPHP::dom_crear_elemento($etiqueta,$texto,$id,$class,$style,$name);
    }
    
    /**
     * This PHP function counts the number of times a given text is displayed and outputs it with an
     * incremented index.
     * 
     * @param texto The parameter "texto" is a string variable that represents the text to be displayed
     * in the output. By default, it is set to "Prueba".
     * @param valor The parameter "valor" is a boolean value that determines whether to reset the
     * counter or not. If the value is set to "true" or any non-zero value, the counter will continue
     * from its previous value. If the value is set to "false" or 0, the counter will be
     */
    public static function dev_contador_texto_para_pruebas($texto='Prueba',$valor = false) {
        static $index = 0;
        
        if($valor===0){
            $index = 0;
        }
    
        $index++;
        echo "<p id='".ScPHP::str_sin_caracteres_especiales($texto)."-$index' class='m-0 p-0 w-100'>$texto: $index</p>";
    }
    
    /**
     * This PHP function echoes hidden text with optional debugging information.
     * 
     * @param texto The text that will be displayed in the hidden div.
     * @param id The id attribute is used to uniquely identify an HTML element. In this case, it is
     * used to identify the div element that contains the hidden text.
     * @param clase The "clase" parameter is a string that represents the CSS class(es) to be applied
     * to the HTML element generated by the function. It allows for custom styling of the element.
     */
    public static function dev_echo_oculto($texto,$id='id-oculto',$clase=''){
        echo "<div style='display: none;' class='$clase' id='$id'>";
        
        if (DEPURAR){
            ScPHP::dev_var_dump($texto);
        }else{
            echo "<p>$texto</p>";
        }
    
        echo '</div>';
    }
    
    /**
     * This is a PHP function that creates a debug output with variable information if a given
     * condition is true.
     * 
     * @param condicion This is a boolean condition that determines whether or not to execute the code
     * inside the function. If the condition is true, the code will be executed, otherwise it will be
     * skipped.
     * @param obj The variable or object that needs to be debugged.
     * @param id The optional parameter "id" is a string that is used to set the ID attribute of the
     * HTML elements generated by the function. It defaults to "id-depuracion" if not provided.
     */
    public static function dev_depurar($condicion,$obj,$id='id-depuracion'){
        if($condicion){
            ScPHP::dom_etiqueta_inicio('div',"debug-$id",'w-100');
            ScPHP::dom_crear_elemento('h3',$id,"debug-$id");
            
            if(ScPHP::is_array($obj,1)){
                $i = 0;
                
                foreach ($obj as $value){
                    ScPHP::dev_var_dump($value,null,"var-dump__$id-".++$i);
                }
            }else{
                ScPHP::dev_var_dump($obj,"var-dump__$id");
            }
    
            ScPHP::dom_etiqueta_fin('div');
        }
    }
    
    /**
     * This PHP function converts an object to a boolean value and returns it.
     * 
     * @param obj The obj parameter is a variable that is being passed to the function. It could be of
     * any data type, but the function is designed to convert it to a boolean value.
     * 
     * @return a boolean value. It is returning the opposite of the boolean value of the input object.
     * If the input object is truthy, it will return true. If the input object is falsy, it will return
     * false.
     */
    public static function dev_obj_a_bool($obj){
        ScPHP::dev_depurar(DEPURAR,$obj,'scphp-dev_obj_a_bool');
        return !(!$obj);
    }
    
    /*###DOM###*/
    
    /**
     * The function takes an array of attributes and returns a string of HTML attributes.
     * 
     * @param arrayAtributos An array containing attributes and their values for an HTML element.
     * 
     * @return a string with the attributes and their values in the format "attribute1='value1',
     * attribute2='value2', ...". If the input parameter is not an array, the function returns false.
     */
    public static function dom_get_atributos($arrayAtributos){
        if(ScPHP::is_array($arrayAtributos)){
            $atributos = '';
            
            ScPHP::dev_depurar(
                DEPURAR,
                [
                    $arrayAtributos
                ],
                'scphp-dom_get_atributos'
            );
    
            foreach ($arrayAtributos as $atributo => $valor){
                if(DEPURAR){
                    ScPHP::dev_var_dump($atributo.' : '.$valor,'p');
                }
    
                $atributos .= ($valor)? $atributo.'="'.$valor.'", ' : '';
            }
    
            $atributos = implode(' ',(explode(',',$atributos)));
            
            return $atributos;
        }
    
        return false;
    }
    
   /**
    * This PHP function creates a DOM element with specified attributes and content.
    * 
    * @param etiqueta The HTML tag to be created (e.g. "div", "p", "span").
    * @param contenido The content that will be placed inside the HTML element.
    * @param id The id attribute is used to uniquely identify an HTML element. It can be used to
    * manipulate the element with JavaScript or to apply styles to it with CSS.
    * @param class The class parameter is used to specify one or more CSS classes for the created HTML
    * element. It is optional and can be left empty if no class is needed.
    * @param style The style parameter is used to add inline CSS styles to the HTML element being
    * created. It should be a string containing valid CSS styles separated by semicolons (;). For
    * example: "color: red; font-size: 16px;".
    * @param name The name attribute of the HTML element that will be created.
    * 
    * @return a boolean value, true if the element was successfully created and false otherwise.
    */
    public static function dom_crear_elemento($etiqueta,$contenido,$id='',$class='',$style='',$name=''){
        if(ScPHP::is_string($etiqueta,1)){
            $atributos = array('id'=>$id,'class'=>$class,'style'=>$style,'name'=>$name);
            $elemento  = "<$etiqueta ".ScPHP::dom_get_atributos($atributos,DEPURAR);
            echo $elemento.">$contenido</$etiqueta>";
            return true;
        }
    
        return false;
    }
    
    /**
     * This PHP function creates an HTML element with specified attributes without closing the tag.
     * 
     * @param etiqueta The HTML tag to be created (e.g. "div", "p", "input", etc.).
     * @param value The value attribute of the HTML element being created. It is used to set the
     * initial value of an input element or the content of other elements such as a button or a
     * paragraph.
     * @param id The id attribute is used to uniquely identify an HTML element. It can be used to
     * manipulate the element with JavaScript or to apply styles to it with CSS.
     * @param class The class parameter is used to specify one or more class names for the HTML
     * element. It is used for styling purposes and can be referenced in CSS files.
     * @param style The style parameter is used to specify the CSS styling for the HTML element being
     * created. It can include properties such as font-size, color, background-color, etc.
     * @param name The name attribute of the HTML element being created.
     * @param type The type parameter is used to specify the type of an input element, such as "text",
     * "password", "submit", etc. It is typically used with the <input> tag.
     * @param src The "src" parameter is used to specify the URL of the image or media file to be
     * displayed or played in the element. It is typically used with the "img" or "audio" elements.
     * @param alt The "alt" attribute is used to provide alternative text for an image if it cannot be
     * displayed. This text is also used by screen readers to describe the image to visually impaired
     * users.
     * 
     * @return a boolean value, true if the input parameter `` is a non-empty string, false
     * otherwise.
     */
    public static function dom_crear_elemento_sin_cerrar($etiqueta,$value='',$id='',$class='',$style='',$name='',$type='',$src='',$alt=''){
        if(ScPHP::is_string($etiqueta,1)){
            $atributos = array('id'=>$id,'class'=>$class,'style'=>$style,'name'=>$name,'value'=>$value,'type'=>$type,'src'=>$src,'alt'=>$alt);
            $elemento  = "<$etiqueta ".ScPHP::dom_get_atributos($atributos,DEPURAR);
            echo $elemento.">";
            return true;
        }
    
        return false;
    }
    
   /**
    * This PHP function creates a custom HTML element with specified attributes and content.
    * 
    * @param etiqueta The HTML tag to be created (e.g. "div", "p", "span").
    * @param contenido The content that will be placed inside the custom element being created.
    * @param arrayTipoAtributos An array containing the types of attributes for the HTML element being
    * created (e.g. "class", "id", "style").
    * @param arrayValorAtributos The values of the attributes for the custom element being created. It
    * is an array that should have the same number of elements as the  parameter,
    * and the values should correspond to the attribute types specified in that parameter.
    * @param etiquetaCerrada A boolean value that determines whether the HTML tag should be closed or
    * not. If set to true, the tag will be closed with a closing tag, otherwise it will not be closed.
    */
    public static function dom_crear_elemento_personalizado($etiqueta,$contenido,$arrayTipoAtributos,$arrayValorAtributos,$etiquetaCerrada=true){
        ScPHP::dev_depurar(DEPURAR,
            array('etiqueta'=>$etiqueta,
                'Contenido'          =>$contenido,
                'arrayTipoAtributos' =>$arrayTipoAtributos,
                'arrayValorAtributos'=>$arrayValorAtributos,
                'cerradoAbierto'     =>$etiquetaCerrada
            ),'scphp-dom_crear_elemento_personalizado');
    
        $arrayTemp = array_combine($arrayTipoAtributos,$arrayValorAtributos);
        $atributos = ScPHP::dom_get_atributos($arrayTemp);
        echo "<$etiqueta $atributos>$contenido";
       
        if($etiquetaCerrada){
            echo "</$etiqueta>";
        }
    }
    
    /**
     * This PHP function creates an input element with specified attributes.
     * 
     * @param type The type of input element to create (e.g. text, password, checkbox, radio, etc.). By
     * default, it is set to 'text'.
     * @param value The value attribute of the input element. It specifies the initial value of the
     * input field.
     * @param id The id parameter is used to specify the unique identifier for the input element. It is
     * commonly used to associate the input element with a label element or to manipulate the element
     * using JavaScript.
     * @param name The name attribute of the input element. It is used to identify the input when the
     * form is submitted.
     * @param class The class parameter is used to specify one or more CSS classes for the input
     * element. This can be useful for styling the element using CSS.
     * @param style The style parameter is used to add inline CSS styles to the HTML element being
     * created. It should be a string containing valid CSS rules separated by semicolons (;). For
     * example: "color: red; font-size: 16px;".
     */
    public static function dom_crear_elemento_input($type='text',$value='',$id='',$name='',$class='',$style=''){
        $name = (isset($name{1}))?$name:$id;
        ScPHP::dom_crear_elemento_sin_cerrar('input',false,$value,$id,$class,$style,$name,$type);
    }
    
    /**
     * This is a PHP function that generates an HTML opening tag with specified attributes.
     * 
     * @param etiqueta The HTML tag to be created (e.g. "div", "p", "span").
     * @param id The id attribute is used to uniquely identify an HTML element. It is often used in CSS
     * and JavaScript to manipulate or style the element. In the given function, the  parameter is
     * used to set the id attribute of the HTML element being created.
     * @param class The class parameter is used to specify one or more CSS classes for the HTML element
     * being created. It can be used to apply styles to the element or to select it using JavaScript or
     * CSS.
     * @param style The style parameter is used to add inline CSS styles to the HTML element. It can be
     * used to define properties such as font-size, color, background-color, etc.
     * @param name The name attribute for the HTML element. It is used to identify the element when
     * submitting a form or scripting with JavaScript.
     * 
     * @return a boolean value of true if the  parameter is set and has a length greater than
     * 1, and false otherwise.
     */
    public static function dom_etiqueta_inicio($etiqueta='',$id='',$class='',$style='',$name=''){
        if(isset($etiqueta{1})){
            $atributos = array('id'=>$id,'class'=>$class,'style'=>$style,'name'=>$name);
            $elemento  = "<$etiqueta ";
          
            foreach ($atributos as $atributo => $valor){
                $elemento .= ($atributo)? $atributo.'="'.$valor.'" ' : '';
            }
    
            echo $elemento.">";
    
            return true;
        }
    
        return false;
    }
    
    /**
     * This PHP function outputs the closing tag of an HTML element if the tag name is provided as an
     * argument.
     * 
     * @param etiqueta The parameter "etiqueta" is a string variable that represents the name of an
     * HTML tag.
     * 
     * @return a boolean value. If the input parameter `` has a length greater than 1, the
     * function will output the closing tag for that HTML tag and return `true`. Otherwise, it will
     * return `false`.
     */
    public static function dom_etiqueta_fin($etiqueta){
        if(isset($etiqueta[1])){
            echo "</$etiqueta>";
            return true;
        }
    
        return false;
    }
    
    /**
     * The function creates a script or link element in the DOM based on the provided parameters for a
     * CDN resource.
     * 
     * @param id The ID attribute for the HTML element that will be created.
     * @param link The URL of the CDN file to be loaded.
     * @param tipo The "tipo" parameter is a string that specifies the type of resource being loaded
     * from a CDN (Content Delivery Network). It can be either "js" or "javascript" or "script" for
     * JavaScript files, or "css" for Cascading Style Sheets files. If no value is provided for
     */
    public static function dom_cdn($id,$link,$tipo='css'){
        ScPHP::dev_depurar(DEPURAR,array($id,$link,$tipo),'scphp-dom_cdn');
        
        switch ($tipo){
            case 'js':
            case 'javascript':
            case 'script':
                ScPHP::dom_crear_elemento_personalizado('script',null,array('id','src'),array($id,$link));
                break;
            case 'css':
            default:
                ScPHP::dom_crear_elemento_personalizado('link',null,array('id','rel','href'),array($id,'stylesheet',$link),false);
                break;
        }
    }
    
   /**
    * This is a PHP function that generates an HTML table based on an input array of content and
    * optional titles, ID, and class.
    * 
    * @param arrayContenido This parameter is an array that contains the data to be displayed in the
    * table. It can be a multidimensional array where each sub-array represents a row in the table.
    * @param arrayTitulos An optional array parameter that contains the titles for the table columns.
    * If not provided, the function will use the keys of the first array in the 
    * parameter as column titles.
    * @param id The id parameter is a string that represents the id attribute of the HTML table element
    * that will be generated by the function. It is optional and can be left empty if not needed.
    * @param class The "class" parameter is used to specify the CSS class(es) to be applied to the HTML
    * table element. This allows for custom styling of the table using CSS. If no class is specified,
    * the table will not have any custom styling applied.
    * 
    * @return `false` if the input parameter `` is not an array. If `` is
    * an array, the function generates an HTML table based on the input parameters ``,
    * ``, ``, and ``. However, the function is not returning the generated HTML
    * table.
    */
    public static function dom_generar_tabla($arrayContenido, $arrayTitulos = [], $id = '', $class='' ){
            if(ScPHP::is_array($arrayContenido)){
                $tableHtml = "<table id='$id' class='$class'>";
    
                if(ScPHP::arr_contiene_keys($arrayContenido) && !$arrayTitulos){
                    $arrayTitulos = array_keys($arrayContenido);
                }
    
                if(!$arrayTitulos){
                    $tableHtml .= '<thead>
                                    <th>';
    
                    foreach($arrayTitulos as $value){
                        $tableHtml .= "<td>$value</td>";
                    }
    
                    $tableHtml .= '</th>
                                </thead>';
                }
    
                $tableHtml .= '<tbody>';
    
                foreach($arrayContenido as $value){
                    if(ScPHP::is_array($value)){
                        $tableHtml .= '<tr>';
    
                        foreach( $value as $row){
                            $tableHtml .= "<td>$row</td>";
                        }
    
                        $tableHtml .= '</tr>';
    
                    }else{
                        $tableHtml .= "<tr><td>$value</td></tr>";
                    }
                }
    
                $tableHtml .= '</tbody>
                            </table>';
            }
    
            return false;
    }
    
    
    /*###URL###*/
    
 
    /**
     * The function returns an array of information about the current website's server and request.
     * 
     * @return an array containing various information about the current website's server and request,
     * such as the server name, protocol, request method, query string, document root, user agent, and
     * more.
     */
    public static function url_informacion_sitio_actual(){
        $indicesServer = array('PHP_SELF',
          'argv',
          'argc',
          'GATEWAY_INTERFACE',
          'SERVER_ADDR',
          'SERVER_NAME',
          'SERVER_SOFTWARE',
          'SERVER_PROTOCOL',
          'REQUEST_METHOD',
          'REQUEST_TIME',
          'REQUEST_TIME_FLOAT',
          'QUERY_STRING',
          'DOCUMENT_ROOT',
          'HTTP_ACCEPT',
          'HTTP_ACCEPT_CHARSET',
          'HTTP_ACCEPT_ENCODING',
          'HTTP_ACCEPT_LANGUAGE',
          'HTTP_CONNECTION',
          'HTTP_HOST',
          'HTTP_REFERER',
          'HTTP_USER_AGENT',
          'HTTPS',
          'REMOTE_ADDR',
          'REMOTE_HOST',
          'REMOTE_PORT',
          'REMOTE_USER',
          'REDIRECT_REMOTE_USER',
          'SCRIPT_FILENAME',
          'SERVER_ADMIN',
          'SERVER_PORT',
          'SERVER_SIGNATURE',
          'PATH_TRANSLATED',
          'SCRIPT_NAME',
          'REQUEST_URI',
          'PHP_AUTH_DIGEST',
          'PHP_AUTH_USER',
          'PHP_AUTH_PW',
          'AUTH_TYPE',
          'PATH_INFO',
          'ORIG_PATH_INFO') ;
      
        $datosServer = array();
      
        foreach ($indicesServer as $arg) {
            if (isset($_SERVER[$arg])) {
                $datosServer[$arg] = $_SERVER[$arg] ;
            }
            else {
                $datosServer[$arg] = "-" ;
            }
        }
      
        return $datosServer ;
    }
      
   /**
    * The function returns the actual URL of the current page in PHP.
    * 
    * @return the actual URL of the current page, including the domain name and the path after the
    * domain name.
    */
    public static function url_get_url_actual_completo(){
        return $_SERVER['HTTP_HOST'].$_SERVER['REQUEST_URI'];
    }
    
   /**
    * The function returns the IP address of the remote client accessing the server.
    * 
    * @return The function `url_get_ip_remoto()` is returning the IP address of the remote client
    * accessing the server. It is using the `` superglobal variable to retrieve the IP address
    * from the `REMOTE_ADDR` key.
    */
    public static function url_get_ip_remoto(){
        return $_SERVER['REMOTE_ADDR'];
    }
    
   /**
    * This PHP function returns the current URL of the page being accessed.
    * 
    * @return the value of the PHP_SELF server variable, which contains the current script file name
    * and path.
    */
    public static function url_get_url_actual(){
        return $_SERVER['PHP_SELF'];
    }
    
   /**
    * This PHP function extracts the server name from a given URL.
    * 
    * @param url The parameter "url" is a string that represents a website URL.
    * 
    * @return the processed server name from the given URL.
    */
    public static function url_get_servidor_nombre($url){
        $url = explode('.',$url);
    
        if(ScPHP::str_existe_en_string($url[0],'www')){
            $urlProcesada = $url[1];
        }else{
            $urlProcesada = str_replace('https://','',$url[0]);
            $urlProcesada = str_replace('http://','',$urlProcesada);
        }
    
        return $urlProcesada;
    }

   /**
    * This PHP function extracts the server URL from a given URL.
    * 
    * @param url The URL that needs to be parsed to extract the host/server URL.
    * 
    * @return the host name of the given URL.
    */
    public static function url_get_servidor_url($url){
        $url_info = parse_url($url);
        return $url_info['host'];
    }
    
   /**
    * This function deletes all cookies stored in the browser.
    */
    public static function url_borrar_cookies(){
        if (isset($_SERVER['HTTP_COOKIE'])) {
            $cookies = explode(';', $_SERVER['HTTP_COOKIE']);
           
            foreach($cookies as $cookie) {
                $parts = explode('=', $cookie);
                $name  = trim($parts[0]);
                setcookie($name, '', time()-1000);
                setcookie($name, '', time()-1000, '/');
            }
        }
    }
    
  /**
   * The function retrieves the title of a YouTube video given its ID.
   * 
   * @param video_id The video ID is a unique identifier for a YouTube video. It is usually an
   * 11-character string of letters and numbers that appears in the video's URL after "v=". For
   * example, in the URL "https://www.youtube.com/watch?v=dQw4w9WgXcQ
   * 
   * @return the title of a YouTube video based on its video ID.
   */
    public static function url_get_youtube_video_title($video_id){
        $url = "http://www.youtube.com/watch?v=".$video_id;
        $str = file_get_contents($url);
        
        if(strlen($str)>0){
            $str = trim(preg_replace('/\s+/', ' ', $str)); // supports line breaks inside <title>
            preg_match("/\<title\>(.*)\<\/title\>/i",$str,$title); // ignore case
          
            return ScPHP::str_reemplazar_expresion_regular($title[1],'/( \- YouTube)/','');
        }
    }
    
   /**
    * This PHP function extracts the ID of a YouTube video from its URL.
    * 
    * @param urlYoutube The URL of a YouTube video.
    * 
    * @return the ID of a YouTube video if the input URL is a valid YouTube video URL, otherwise it
    * returns false.
    */
    public static function url_get_youtube_video_id($urlYoutube){
        $expresionUrl     = '/(https?:\/\/)?(www\.)?(youtube\.com\/watch\?v=(\w+|\-)+|youtu\.be\/(\w+|\-)+)/';
        $expresionIdVideo = '/(((\?v=)[\w\-]+)|be\/\w+)/';
       
        return (ScPHP::str_incluye_expresion_regular($urlYoutube,$expresionUrl)) ?
            substr(ScPHP::str_extraer_expresion_regular($urlYoutube, $expresionIdVideo),3) :
            false;
    }
    
    /**
     * This PHP function generates an iframe for a YouTube video link.
     * 
     * @param link The YouTube video link for which the iframe needs to be generated.
     * @param altura "altura" is a parameter that specifies the height of the YouTube video iframe that
     * will be generated by the function "url_generar_iframe_youtube". It can be specified in different
     * units such as pixels (px), percentage (%), viewport height (vh), viewport width (vw), or minimum
     * viewport
     * @param ancho The width of the YouTube video iframe. It can be specified in pixels (px),
     * percentage (%), viewport height (vh), viewport width (vw), or minimum viewport dimension (vmin).
     * @param class The CSS class that will be applied to the container div of the YouTube iframe. It
     * can be used to style the iframe or its container.
     * @param return A boolean value that determines whether the function should return the generated
     * iframe code as a string or directly output it to the page. If set to true, the function will
     * return the iframe code as a string. If set to false (default), the function will output the
     * iframe code directly to the page.
     * 
     * @return either a string containing an HTML iframe element for embedding a YouTube video, or a
     * boolean value of false if the input link is not a valid YouTube video link.
     */
    public static function url_generar_iframe_youtube($link,$altura='30vh',$ancho='100%',$class="",$return=false){
        ScPHP::dev_depurar(DEPURAR,array($link,$altura,$ancho),'scphp-url_generar_iframe_youtube');
        $videoId = ScPHP::url_get_youtube_video_id(ScPHP::str_quitar_espacios_blancos($link));
       
        if($videoId){
            $altura = ScPHP::str_incluye_expresion_regular($altura,'\d+(\%|px|vh|vmin|vw)')?($altura):($altura.'px');
            $ancho  = ScPHP::str_incluye_expresion_regular($ancho  ,'\d+(\%|px|vh|vmin|vw)')?($ancho)  :  ($ancho.'px');
            $iframe = '
                <div id="contenedor-iframe-yt-'.$videoId.'" class="'.$class.'">
                    <iframe id="iframe-yt-'.$videoId.'" style="width:'.$ancho.'; height:'.$altura.';" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen 
                        src="https://www.youtube.com/embed/'.$videoId.'">
                    </iframe>
                </div>
            ';
          
            if ($return){
                return $iframe;
            }
    
            echo $iframe;
            return true;
        }else{
            return false;
        }
    }
    
   /**
    * This PHP function downloads a website's favicon and saves it to a specified folder on a server.
    * 
    * @param url The URL of the image to be downloaded and saved to the server.
    * @param serverURl The URL of the server where the image will be downloaded and saved.
    * @param direccionCarpeta The parameter "direccionCarpeta" is a string that represents the
    * directory path where the downloaded image will be saved on the server. The default value is
    * "assets/archivos/logos".
    * 
    * @return a boolean value - true if the image was successfully downloaded and saved to the server,
    * and false if the image already exists on the server.
    */

    
    public static function url_descargar_imagen_al_servidor($url,$serverURl , $direccionCarpeta='assets/archivos/logos'){
        $url = (ScPHP::str_inicia_con($url,'http://') || ScPHP::str_inicia_con($url,'https://'))?
            $url :
            'http://'.$url ;
        $url = parse_url($url)['host'];
        $nombreImagen = (ScPHP::str_inicia_con($url,'www.'))?
            $url :
            'www.'.$url ;
        $nombreImagen = urlencode($nombreImagen);
    
        if (!is_file($serverURl . "$direccionCarpeta/$nombreImagen")) {
            //abrimos un fichero donde guardar la descarga de la web
            $fp = fopen("$direccionCarpeta/$nombreImagen.png", "w");
    
            if($fp){
                // Se crea un manejador CURL
                $ch = curl_init();
    
                // Se establece la URL y algunas opciones
                curl_setopt($ch, CURLOPT_URL, "https://www.google.com/s2/favicons?domain=$url");
                //determina donde guardar el fichero
                curl_setopt($ch, CURLOPT_FILE, $fp);
    
                // Se obtiene la URL indicada
                curl_exec($ch);
    
                // Se cierra el recurso CURL y se liberan los recursos del sistema
                curl_close($ch);
    
                //se cierra el manejador de ficheros
                fclose($fp);
                return true;
            }
    
        }
        return false;
    }

    /**
     * This is a PHP function that uses cURL to make HTTP requests with support for GET and POST
     * methods, custom headers, and JSON content type.
     * 
     * @param url The URL of the API endpoint that you want to send a request to.
     * @param parametros This is an optional parameter that is an array of data that will be sent in
     * the request body. It is used only when the HTTP method is POST. The data is encoded using the
     * `http_build_query` function.
     * @param headers An array of additional HTTP headers to be sent with the request. These headers
     * can be used to provide additional information about the request or to modify the behavior of the
     * server. In the given code, the "Content-Type" header is added to specify that the request body
     * is in JSON format.
     * @param method The HTTP method to be used in the request. It can be either "GET" or "POST". If
     * not specified, it defaults to "GET".
     * 
     * @return the result of the cURL request made to the specified URL with the specified parameters,
     * headers, and HTTP method. The result can be any data returned by the server, depending on the
     * specific API or web service being accessed.
     */
    public static function url_curl ($url, $parametros = array(), $headers = array(), $method = "GET") {
        $ch = curl_init();
        
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        
        if ($method === "POST") {
            curl_setopt($ch, CURLOPT_POST, true);
            curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($parametros));
        }
        
        $headers[] = "Content-Type: application/json";
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
        
        $result = curl_exec($ch);
        
        curl_close($ch);
        
        return $result;
    }
    
    //Falta corrección
    /**
     * This PHP function searches for images on Google based on a given search query and returns the
     * HTML image tags.
     * 
     * @param busqueda The search query for which images are to be searched on Google.
     * 
     * @return an array of image tags obtained from a Google search for the given search term, with the
     * vertical and portada filters excluded.
     */
    function url_google_buscar_imagenes($busqueda) {
        $ch = curl_init();
        $userAgent = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3';
        $headers = array();
        $headers[] = "Accept-Language: es-ES,es;q=0.8";
        $headers[] = "Accept-Encoding: gzip, deflate, br";
        $headers[] = "Connection: keep-alive";
        $headers[] = "DNT: 1";
        $headers[] = "Upgrade-Insecure-Requests: 1";
        $headers[] = "User-Agent: $userAgent";
    
        $url = "https://www.google.com/search?q=" . urlencode($busqueda) . "&tbm=isch&tbo=u&source=univ&sa=X&ved=0ahUKEwiT5ZGBlp_PAhVGuY8KHYLsB-4QsAQIHQ&biw=1274&bih=674&dpr=1";
        
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
        curl_setopt($ch, CURLOPT_ENCODING, 'gzip');
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
    
        $result = curl_exec($ch);
    
        curl_close($ch);
    
        preg_match_all('/<img[^>]+>/i', $result, $imagenes);
        $tags = array();
        foreach ($imagenes[0] as $imagen) {
            if (!strpos($imagen, 'height="77"') && !strpos($imagen, 'id="wob_tm"')) {
                $tags[] = $imagen;
            }
        }
        return $tags;
    }

    public static function url_google_buscar_imagenes_2($busqueda){
        $img_pattern = '/<img[^>]+>/i';
        
        if ($busqueda != '') {
            $ch = curl_init();
            curl_setopt($ch, CURLOPT_URL, "https://www.google.com.ar/search?q=".urlencode($busqueda.' -vertical -portada')."&source=lnms&tbm=isch&sa=X");
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
            //Execute the session, returning the results to $curlout, and close.
            $curlout = curl_exec($ch);
            curl_close($ch);
            preg_match_all($img_pattern, $curlout, $img_tags);
        }
    
        return $img_tags;
    }

    /**
     * The function converts a given string into a URL-friendly format by removing invalid characters,
     * replacing certain letters, and converting spaces to hyphens.
     * 
     * @param t The input string that needs to be converted into a URL-friendly format.
     * 
     * @return a string that has been modified to be a "friendly URL" by removing invalid characters,
     * replacing certain accented letters with their unaccented counterparts, removing any characters
     * that are not alphanumeric or a space/hyphen, trimming whitespace, and converting all remaining
     * spaces to hyphens.
     */
    public static function url_str_a_url_amigable($t){
        $caracteresInvalidos = explode(',', ".,\,,(,),[,],{,},!,¡,.,?,#,',\",`");
        $conservar           = '0-9a-z\s\-'; // juego de caracteres a conservar
        $regex               = sprintf('~[^%s]++~i', $conservar); // case insensitive
        
        foreach ($caracteresInvalidos as $caracter) {
            $t = str_replace($caracter, "", $t);
        }
    
        return strtolower(
                    preg_replace('/\s+/','-',
                        preg_replace($regex, '',trim(ScPHP::str_sin_caracteres_especiales($t)))
                    )
                );
    }
    
    /**
     * The function redirects the user to a specified URL with an optional HTTP status code.
     * 
     * @param url The URL to which the user will be redirected.
     * @param statusCode statusCode is an optional parameter that specifies the HTTP status code to be
     * sent along with the redirect header. The default value is 303, which stands for "See Other".
     * Other possible values include 301 (Moved Permanently), 302 (Found), and 307 (Temporary
     * Redirect). The choice
     */
    public static function url_redirect($url, $statusCode = 303){
       header('Location: ' . $url, true, $statusCode);
       die();
    }
    
    
    /*###SQL###*/
    
   /**
    * This function establishes a PDO connection to a MySQL database with customizable options.
    * 
    * @param host The hostname or IP address of the database server.
    * @param bbdd The name of the database to connect to.
    * @param user The username used to connect to the database.
    * @param pass The password used to connect to the database.
    * @param puerto The "puerto" parameter is the port number used to connect to the database server.
    * The default value is set to '3306', which is the default port number for MySQL databases.
    * @param opcionesPDO  is an optional parameter that allows you to pass an array of
    * driver-specific connection options to the PDO constructor. These options are used to configure
    * the connection to the database server. For example, you can set the character set, enable SSL, or
    * set the fetch mode. The options are
    * @param driver The database driver to use. In this case, it is set to 'mysql' which means that the
    * code is connecting to a MySQL database. Other possible values for this parameter could be 'pgsql'
    * for PostgreSQL or 'sqlite' for SQLite.
    * 
    * @return a PDO object representing a connection to a MySQL database.
    */
    public static function sql_conexion($host, $bbdd, $user, $pass, $puerto = '3306', $opcionesPDO = [], $driver='mysql'){
        try {
            $dsn = "$driver:host=$host;dbname=$bbdd;port=$puerto";
            $dbh = new PDO($dsn, $user, $pass, $opcionesPDO);
            
            $dbh->setAttribute(PDO::ATTRR_ERRMODE, PDO::ERRMODE_SILENT);
            $dbh->setAttribute(PDO::ATTRR_ERRMODE, PDO::ERRMODE_WARNING);
            $dbh->setAttribute(PDO::ATTRR_ERRMODE, PDO::ERRMODE_EXCEPTION);
            
            return $dbh;
    
        } catch (PDOException $e){
            echo $e->getMessage();
        }
        
    }
    
   /**
    * This is a PHP function that executes a SQL SELECT statement with optional parameters and returns
    * the result as an array or false if there was an error.
    * 
    * @param conexion This parameter is a reference to the database connection object. It is used to
    * execute the SQL query on the database.
    * @param sql The SQL query to be executed.
    * @param parametros An optional array of parameters to bind to the prepared statement placeholders
    * in the SQL query. If there are no placeholders, this parameter can be omitted.
    * @param tipoPDOFech The  parameter is an optional parameter that specifies the format
    * in which the result set should be returned. It is set to PDO::FETCH_ASSOC by default, which
    * returns an associative array where the keys are the column names and the values are the column
    * values. Other possible values for this
    * 
    * @return the result of the SQL query as an array of rows, where each row is an associative array
    * with the column names as keys and the values as values. If the query fails or returns no results,
    * it returns false.
    */
    public static function sql_select(&$conexion, $sql, $parametros = [], $tipoPDOFech = PDO::FETCH_ASSOC){
        $query = $conexion->prepare($sql);
       
        try {
            $sqlResult = $query->execute($parametros);
    
            if ($sqlResult) {
                $sqlResult = $query->fetchAll($tipoPDOFech);
                $sqlResult = count($sqlResult) > 0 ? $sqlResult : false;
    
            }else{
                $sqlResult = false;
            }
    
            if (DEPURAR){
                ScPHP::dev_echo('Debug de sql_secure_lookup:');
                ScPHP::dev_var_dump($sql);
                ScPHP::dev_var_dump($parametros);
                ScPHP::dev_var_dump($tipoPDOFech);
                ScPHP::dev_var_dump($sqlResult);
            }
    
            return $sqlResult;
    
        } catch (Exception $e) {
            ScPHP::dev_var_dump('Hubo un error: ');
            ScPHP::dev_var_dump($e);
            return false;
        }
    }
    
    /* The above code is a PHP function named `sql_execute` that takes three parameters: `` (a
    database connection object), `` (a SQL query string), and `` (an optional array
    of parameters to bind to the query). */
    public static function sql_execute(&$conexion, $sql, $parametros = null){
        $query = $conexion->prepare($sql);
    
        try {
            $execResult = $query->execute($parametros);
    
            if (DEPURAR){
                ScPHP::dev_echo('Debug de ScPHP::sql_secure_lookup (4):');
                ScPHP::dev_var_dump($sql);
                ScPHP::dev_var_dump($parametros);
                ScPHP::dev_var_dump($execResult);
            }
    
            return !!( $execResult );
    
        } catch (Exception $e) {
            ScPHP::dev_var_dump('Hubo un error: ');
            ScPHP::dev_var_dump($e);
            return false;
        }
    
    }
    
    
  /**
   * The function performs a secure SQL lookup using PDO and returns the result as an array or false if
   * there was an error.
   * 
   * @param conexion  is a reference to a PDO database connection object. It is used to
   * prepare and execute the SQL query.
   * @param sql The SQL query to be executed.
   * @param array The  parameter is an optional array that contains the values to be bound to the
   * placeholders in the SQL query. It is used to prevent SQL injection attacks by ensuring that user
   * input is properly sanitized before being used in the query.
   * 
   * @return either an array of results from the SQL query or false if there was an error.
   */
    public static function sql_lookup(&$conexion,$sql,$array=null){
        $query     = $conexion->prepare($sql);
        $sqlResult = false;
    
        try {
            $sqlResult = $query->execute($array);
    
            if ($sqlResult) {
                $sqlResult = $query->fetchAll(PDO::FETCH_ASSOC);
                $query = null;
    
                if (DEPURAR){
                    ScPHP::dev_echo('Debug de ScPHP::sql_secure_lookup (3):');
                    ScPHP::dev_var_dump($sql);
                    ScPHP::dev_var_dump($array);
                    ScPHP::dev_var_dump($sqlResult);
                }
    
                if (count($sqlResult)==0){
                    foreach ($array as &$valor){
                        $valor = htmlentities($valor);
                    }
                }
    
                return count($sqlResult) != 0 ? $sqlResult:false;
            }else{
                return $datos[0][0] = false;
            }
        } catch (Exception $e) {
            ScPHP::dev_var_dump('Hubo un error: ');
            ScPHP::dev_var_dump($e);
            return false;
        }
    }
    
    public static function sql_exec_sql(&$conexion, $sql, $array = null){
        $query     = $conexion->prepare($sql);
    
        foreach ( $array as &$valor){
            $valor = (is_string($valor)) ? nl2br( htmlentities($valor) ) : $valor;
        }
    
        try {
            return $query->execute($array);
        } catch (Exception $exception) {
            echo $exception;
            return false;
        }
    }
    
    
    /*###JS###*/
    
    public static function js_alert($texto,$id='',$class=''){
        ScPHP::dom_crear_elemento('script',"alert(`" . str_replace('`','\`',$texto) . "` );",$id,$class);
    }
    
    public static function js_console_log($texto,$id='',$class=''){
        ScPHP::dom_crear_elemento('script',"console.log(`" . str_replace('`','\`',$texto) . "` );",$id,$class);
    }
    
    /*###STR###*/
    
    public static function str_existe_en_string($texto,$busqueda){
        ScPHP::dev_depurar(DEPURAR,$texto,'scphp-str_existe_en_string');
        return (strpos($texto,$busqueda) !== false);
    }
    
    public static function str_quitar_espacios_y_lower($texto){
        ScPHP::dev_depurar(DEPURAR,$texto,'scphp-str_existe_en_string');
        return strtolower(preg_replace('/(\n|\r|\t|\s)/','',$texto));
    }
    
    public static function str_resaltar_texto($t,$busqueda,$class=null){
        return (isset($t{1}) && isset($busqueda{1}))?str_replace($busqueda,"<b class='$class'>$busqueda</b>",$t):false;
    }
    
    public static function str_generar_enlaces_html_de_string($texto){
        ScPHP::dev_depurar(DEPURAR,
            array(
                $texto,
                preg_replace(
                    '#((https?|ftp)://(\S*?\.\S*?))([\s)\[\]{},;"\':<]|\.\s|$)#i',
                    "<a href=\"$1\" target=\"_blank\">$3</a>$4",
                    $texto
                )
            ),
            'scphp-str_generar_enlaces_html_de_string');
        $texto = ScPHP::str_reemplazar_expresion_regular($texto,'&amp;','&');
      
        return preg_replace(
            '#((https?|ftp)://(\S*?\.\S*?))([\s)\[\]{},;"\':<]|\.\s|$)#i',
            "<a href=\"$1\" target=\"_blank\">$3</a>$4",
            $texto
        );
    }
    
    public static function str_reemplazar_expresion_regular($t,$expresion,$reemplazo){
        $expresion = ScPHP::str_corregir_expresion_regular($expresion);
        ScPHP::dev_depurar(DEPURAR,"t : $t expresion : $expresion reemplazo : $reemplazo ",'scphp-str_reemplazar_expresion_regular');
      
        return preg_replace(
            $expresion,
            $reemplazo,
            $t
        );
    }
    
    public static function str_incluye_expresion_regular($t,$expresion){
        $expresion = ScPHP::str_corregir_expresion_regular($expresion);
        ScPHP::dev_depurar(DEPURAR,array($t,$expresion),'scphp-str_incluye_expresion_regular');
       
        return preg_match($expresion,$t);
    }
    
    public static function str_corregir_expresion_regular($expresion){
        ScPHP::dev_depurar(DEPURAR,array($expresion),'scphp-str_corregir_expresion_regular');
      
        return (ScPHP::str_inicia_con($expresion,'/') && ScPHP::str_finaliza_con($expresion,'/')) ?
            $expresion :
            '/'.$expresion.'/';
    }
    
    public static function str_extraer_expresion_regular($t,$expresion){
        ScPHP::dev_depurar(DEPURAR,array($t,$expresion),'scphp-str_extraer_expresion_regular');
        $expresion     = ScPHP::str_corregir_expresion_regular($expresion);
        $coincidencias = false;
    
        if(ScPHP::str_incluye_expresion_regular($t,$expresion)){
            preg_match_all($expresion,$t,$coincidencias,PREG_OFFSET_CAPTURE);
            $arrayResutl = array();
    
            for ($i=0,$iMax=count($coincidencias[0]);$i<$iMax;$i++ ){
                $valor=$coincidencias[0];
                for ($j=0 ;$j<$iMax;$j++){
                    $arrayResutl[$j] = ($valor[$j][0]);
                }
            }
    
            $coincidencias = count($arrayResutl)>1? $arrayResutl : $arrayResutl[0];
        }
    
        return $coincidencias;
    }
    
    public static function str_inicia_con($t,$busqueda){
        ScPHP::dev_depurar(DEPURAR,$t,'scphp-str_inicia_con');
        return (strpos($t, $busqueda) === 0);
    }
    
    public static function str_finaliza_con($t,$busqueda){
        ScPHP::dev_depurar(DEPURAR,$t,'scphp-str_finaliza_con');
        $cantidadCaracteres = strlen ($busqueda);
        
        return ($cantidadCaracteres && substr($t, -$cantidadCaracteres) == $busqueda);
    }
    
    public static function str_contiene($t,$busqueda){
        return ScPHP::str_existe_en_string($t,$busqueda,DEPURAR);
    }
    
    public static function str_quitar_espacios_extra($t){
        ScPHP::dev_depurar(DEPURAR,$t,'scphp-str_quitar_espacios_extra');
        return trim(ScPHP::str_reemplazar_expresion_regular($t,'/(\n|\s)+/',' '));
    }
    
    public static function str_quitar_espacios_blancos($t){
        ScPHP::dev_depurar(DEPURAR,$t,'scphp-str_quitar_espacios_blancos');
        return ScPHP::str_reemplazar_expresion_regular($t,'(\n|\s|\t|\r)+','');
    }
    
    /**
     * This PHP function removes special characters from a given string.
     * 
     * @param texto The input string that needs to be processed and have its special characters
     * removed.
     * @param quitarTodos The parameter "quitarTodos" is a boolean value that determines whether to
     * remove all special characters from the input string or not. If it is set to true, then all
     * special characters will be removed, otherwise only some specific characters may be removed based
     * on the implementation of the function.
     * 
     * @return If the length of the input string is greater than 1, the function returns the input
     * string with all special characters removed or replaced with their ASCII equivalent. If the
     * length of the input string is less than or equal to 1, the function returns the input string as
     * is.
     */
    public static function str_sin_caracteres_especiales($texto){
        if(ScPHP::is_string($texto)){
            setlocale(LC_ALL, "en_US.utf8");
            return iconv("utf-8", "ascii//TRANSLIT", $texto);
        }
        return false;
    }
    
    public static function str_to_oracion($t){
        ScPHP::dev_depurar(DEPURAR,$t,'scphp-str_to_oracion');
        return ScPHP::is_string($t,1) && strtolower($t) === $t ? ucfirst($t) : $t;
    }
    
    
    /*###FEC###*/
    
    public static function fec_formatear($fecha,$formato='Y-m-d H:i:s'){
        ScPHP::dev_depurar(DEPURAR,array($fecha,$formato),'scphp-fec_formatear');
        return date($formato, strtotime($fecha));
    }
    
    
    /*###ARR###*/
    
    public static function arr_incluye_expresion_regular($array,$expresion){
        ScPHP::dev_depurar(DEPURAR,array($array,$expresion),'scphp-arr_incluye_expresion_regular');
    
        if (is_array($array) && isset($expresion{1})){
            $expresion = ScPHP::str_corregir_expresion_regular($expresion);
           
            foreach ($array as $valor){
                if (ScPHP::str_incluye_expresion_regular($valor,$expresion)){
                    return true;
                }
            }
        }
    
        return false;
    }
    
    public static function arr_to_json($arr,$arrayKeys=null){
        ScPHP::dev_depurar(DEPURAR,array($arr,$arrayKeys),'scphp-arr_poner_keys');
      
        if(ScPHP::is_array($arr,1)){
            if(!ScPHP::arr_contiene_keys($arr) && ScPHP::arr_contiene_keys($arr) ){
                $lista = '';
    
                foreach ($arr as $valor){
                    $lista .= json_encode($valor).' , ';
    
                }
    
                return '['.substr($lista,0,-3).']';
            }
    
            if(ScPHP::is_array($arrayKeys,1) && !ScPHP::arr_contiene_keys($arr)){
                $arr = ScPHP::arr_poner_keys($arrayKeys,$arr);
            }
    
            return json_encode($arr);
        }
    
        return false;
    }
    
    public static function arr_contiene_keys($arr){
        ScPHP::dev_depurar(DEPURAR,$arr,'scphp-arr_contiene_keys');
        $arr = array_keys($arr);
        
        return (int) preg_grep('/(\D)+/g',$arr);
    }
    
    public static function arr_poner_keys($arrayKeys,$arr){
        ScPHP::dev_depurar(DEPURAR,array($arrayKeys,$arr),'scphp-arr_poner_keys');
        
        if (ScPHP::is_array($arrayKeys) && ScPHP::is_array($arr)){
            return array_combine($arrayKeys, $arr);
        }
    
        return false;
    }
    
    public static function arr_unir($arr1,$arr2){
        ScPHP::dev_depurar(DEPURAR,array($arr1,$arr2),'scphp-arr_unir');
        
        if (ScPHP::is_array($arr1,1) && ScPHP::is_array($arr2,1) ){
            return array_merge($arr1, $arr2);
        }
    
        return false;
    }
    
    /*###IS###*/
    public static function is_string($t,$longitud=0){
        ScPHP::dev_depurar(
            DEPURAR,
            array(
                $t,
                $longitud,
                ( is_string($t) && isset($t{$longitud}) )
            ),
            'scphp-is_string'
        );
        $longitud = ($longitud!=0) ? $longitud-1 : $longitud;
        
        return is_string($t) && isset($t{$longitud});
    }
    
    public static function is_url($url){
        ScPHP::dev_depurar(DEPURAR,$url,'scphp-is_url');
        
        if (ScPHP::is_string($url,3)){
            return filter_var($url,FILTER_VALIDATE_URL);
        }
    
        return false;
    }
    
    public static function is_array($array,$count=0){
        ScPHP::dev_depurar(DEPURAR,array($array,$count),'scphp-is_array');
        return is_array($array) &&  count($array) >= $count;
    }
    
    public static function is_bool($obj){
        ScPHP::dev_depurar(DEPURAR,$obj,'scphp-is_bool');
        return is_bool($obj);
    }
    
    public static function is_int($num,$tamanio=false){
        $tamanio = is_numeric($tamanio) ? $num >= $tamanio : true;
        return is_int($num) && ($tamanio);
    }
    
    public static function is_numeric($num,$tamanio=false){
        $tamanio = is_numeric($tamanio) ? $num >= $tamanio : true;
        return is_numeric($num) && ($tamanio);
    }
    public static function is_float($num,$tamanio=false){
        $tamanio = is_numeric($tamanio) ? $num >= $tamanio : true;
        return is_float($num) && ($tamanio);
    }
    
}